/**
 * Copyright (C) 2016 Stratio (http://stratio.com)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.stratio.sparkta.plugin.parser.datetime

import java.io.{Serializable => JSerializable}
import java.text.SimpleDateFormat
import java.util.{TimeZone, Date}

import org.apache.spark.sql.Row
import org.apache.spark.sql.types.StructType
import org.joda.time.format.{DateTimeFormatter, ISODateTimeFormat}

import com.stratio.sparkta.sdk.{Event, Parser}

class DateTimeParser(name: String,
                     order: Integer,
                     inputField: String,
                     outputFields: Seq[String],
                     schema: StructType,
                     properties: Map[String, JSerializable])
  extends Parser(name, order, inputField, outputFields, schema, properties) {

  val formats = properties.get("inputFormat")

  override def parse(data: Row): Row = {
    val inputValue = data.get(schema.fieldIndex(inputField))
    val formatterOption = DateTimeParser.formatter(formats)
    val newData = outputFields.map(outputField => {
        if (formatterOption.isDefined && !inputValue.isInstanceOf[Date]) {
          formatterOption.get match {
            case Right("unix") => new Date(inputValue.toString.toLong * 1000L)
            case Right("unixMillis") => new Date(inputValue.toString.toLong)
            case Right("autoGenerated") => new Date()
            case Right("hive") => getDateFromHiveFormat(inputValue.toString)
            case Left(formatter) => formatter.parseDateTime(inputValue.toString).toDate
          }
        } else inputValue
      })

    Row.fromSeq(data.toSeq ++ newData)
  }

  protected def getDateFromHiveFormat(hiveFormatDate: String): Date = {
    val sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss")
    sdf.setTimeZone(TimeZone.getTimeZone("UTC"))
    sdf.parse(hiveFormatDate)
  }

}

object DateTimeParser {

  val formatMethods = classOf[ISODateTimeFormat].getMethods.toSeq.map(x => (x.getName, x)).toMap

  def formatter(formats: Option[JSerializable]): Option[Either[DateTimeFormatter, String]] = {
    formats match {
      case Some(format) => {
        format.toString match {
          case "unix" => Some(Right("unix"))
          case "unixMillis" => Some(Right("unixMillis"))
          case "autoGenerated" => Some(Right("autoGenerated"))
          case "hive" => Some(Right("hive"))
          case _ => Some(Left(formatMethods(format.toString).invoke(None).asInstanceOf[DateTimeFormatter]))
        }
      }
      case None => None
    }
  }
}
