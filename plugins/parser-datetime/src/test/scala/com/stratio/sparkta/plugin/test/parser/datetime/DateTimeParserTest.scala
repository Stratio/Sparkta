/**
 * Copyright (C) 2016 Stratio (http://stratio.com)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.stratio.sparkta.plugin.test.parser.datetime

import java.util.Date

import org.apache.spark.sql.Row
import org.apache.spark.sql.types.{StringType, StructField, StructType}
import org.junit.runner.RunWith
import org.scalactic.TolerantNumerics
import org.scalatest.junit.JUnitRunner

import com.stratio.sparkta.plugin.parser.datetime.DateTimeParser
import com.stratio.sparkta.sdk.Event
import org.joda.time.DateTime
import org.joda.time.chrono.ISOChronology
import org.scalatest.{Inspectors, Matchers, WordSpecLike}
import Inspectors._
import scala.math._

@RunWith(classOf[JUnitRunner])
class DateTimeParserTest extends WordSpecLike with Matchers {

  val inputField = "ts"
  val outputsFields = Seq("ts")

  //scalastyle:off
  "A DateTimeParser" should {
    "parse unixMillis" in {
      val e1 = Row(1416330788000L)
      val e2 = Row(new Date(1416330788000L))
      val schema = StructType(Seq(StructField("ts", StringType)))

      val resultantEvent =
        new DateTimeParser("name", 1, inputField, outputsFields, schema, Map("inputFormat" -> "unixMillis")).parse(e1)

      assertResult(e2)(resultantEvent)
    }
    "parse unixMillis string" in {
      val e1 = Row("1416330788000")
      val e2 = Row(new Date(1416330788000L))
      val schema = StructType(Seq(StructField("ts", StringType)))

      val resultantEvent =
        new DateTimeParser("name", 1, inputField, outputsFields, schema, Map("inputFormat" -> "unixMillis")).parse(e1)

      assertResult(e2)(resultantEvent)
    }
    "parse unix" in {

      val e1 = Row("1416330788")
      val e2 = Row(new Date(1416330788000L))
      val schema = StructType(Seq(StructField("ts", StringType)))

      val resultantEvent =
        new DateTimeParser("name", 1, inputField, outputsFields, schema, Map("inputFormat" -> "unix")).parse(e1)

      assertResult(e2)(resultantEvent)
    }
    "parse unix string" in {

      val e1 = Row("1416330788")
      val e2 = Row(new Date(1416330788000L))
      val schema = StructType(Seq(StructField("ts", StringType)))

      val resultantEvent =
        new DateTimeParser("name", 1, inputField, outputsFields, schema, Map("inputFormat" -> "unix")).parse(e1)

      assertResult(e2)(resultantEvent)
    }
    "parse dateTime" in {

      val e1 = Row("2014-05-23T21:22:23.250Z")
      val e2 = Row(new DateTime(ISOChronology.getInstanceUTC).withYear(2014).withMonthOfYear(5).withDayOfMonth(23)
        .withHourOfDay(21).withMinuteOfHour(22).withSecondOfMinute(23).withMillisOfSecond(250)
        .toDate
      )
      val schema = StructType(Seq(StructField("ts", StringType)))

      val resultantEvent =
        new DateTimeParser("name", 1, inputField, outputsFields, schema, Map("inputFormat" -> "dateTime")).parse(e1)

      assertResult(e2)(resultantEvent)
    }
    "not parse if the field does not match" in {

      val e1 = Row("1212")
      val e2 = Row("1212")
      val schema = StructType(Seq(StructField("otherField", StringType)))

      val resultantEvent =
        new DateTimeParser("name", 1, inputField, outputsFields, schema, Map("inputFormat" -> "unixMillis")).parse(e1)

      assertResult(e2)(resultantEvent)
    }
    "not parse and generate a new Date" in {

      val e1 = Row("1416330788")
      val e2 = Row(new Date())
      val schema = StructType(Seq(StructField("ts", StringType)))

      val resultantEvent =
        new DateTimeParser("name", 1, inputField, outputsFields, schema, Map("inputFormat" -> "autoGenerated"))
          .parse(e1)
          .get(0)
          .asInstanceOf[Date]
          .getTime

      e2.get(0).asInstanceOf[Date].getTime should be <=(resultantEvent)
    }

    "not parse if inputFormat does not exist" in {

      val e1 = Row("1416330788")
      val schema = StructType(Seq(StructField("ts", StringType)))

      val resultantEvent =
        new DateTimeParser("name", 1, inputField, outputsFields, schema, Map()).parse(e1)

      assertResult(e1)(resultantEvent)
    }

    "parse dateTime in hive format" in {

      val e1 = Row("2015-11-08 15:58:58")
      val e2 = Row(new DateTime(ISOChronology.getInstanceUTC).withYear(2015).withMonthOfYear(11).withDayOfMonth(8)
        .withHourOfDay(15).withMinuteOfHour(58).withSecondOfMinute(58).withMillisOfSecond(0)
        .toDate
      )
      val schema = StructType(Seq(StructField("ts", StringType)))

      val resultantEvent =
        new DateTimeParser("name", 1, inputField, outputsFields, schema, Map("inputFormat" -> "hive")).parse(e1)

      assertResult(e2.get(0).asInstanceOf[Date].getTime)(resultantEvent.get(0).asInstanceOf[Date].getTime)
    }
  }
}
