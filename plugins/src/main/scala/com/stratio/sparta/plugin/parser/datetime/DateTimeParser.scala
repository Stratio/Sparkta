/*
 * Copyright (C) 2015 Stratio (http://stratio.com)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *         http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.stratio.sparta.plugin.parser.datetime

import java.io.{Serializable => JSerializable}
import java.text.SimpleDateFormat
import java.util.{Date, TimeZone}

import com.github.nscala_time.time.Imports._
import com.stratio.sparta.sdk.AggregationTime._
import com.stratio.sparta.sdk.Parser
import com.stratio.sparta.sdk.properties.ValidatingPropertyMap._
import org.apache.spark.sql.Row
import org.apache.spark.sql.types.StructType
import org.joda.time.format.{DateTimeFormatter, ISODateTimeFormat}

class DateTimeParser(order: Integer,
                     inputField: String,
                     outputFields: Seq[String],
                     schema: StructType,
                     properties: Map[String, JSerializable])
  extends Parser(order, inputField, outputFields, schema, properties) {

  private val Formats = properties.getString("inputFormat", None)
  private val GranularityProperty = properties.getString(GranularityPropertyName, None)

  override def parse(row: Row, removeRaw: Boolean): Row = {
    val inputValue = Option(row.get(inputFieldIndex))
    val newData = {
      outputFields.map(outputField => {
        val outputSchemaValid = outputFieldsSchema.find(field => field.name == outputField)
        outputSchemaValid match {
          case Some(outSchema) =>
            if (extractAutoGeneratedOption) parseToOutputType(outSchema, applyGranularity(new DateTime()))
            else {
              inputValue match {
                case Some(value: DateTime) =>
                  parseToOutputType(outSchema, applyGranularity(value))
                case Some(value: String) =>
                  if (value.isEmpty)
                    returnNullValue(new IllegalStateException(
                      s"Impossible to parse because value is empty in the field: ${outSchema.name}"))
                  else parseToOutputType(outSchema, applyGranularity(parseDate(value)))
                case Some(value) =>
                  parseToOutputType(outSchema, applyGranularity(parseDate(value)))
                case None =>
                  returnNullValue(new IllegalStateException(
                    s"Impossible to parse because value is empty in the field: ${outSchema.name}"))
              }
            }
          case None =>
            returnNullValue(new IllegalStateException(s"Impossible to parse outputField: $outputField in the schema"))
        }
      })
    }
    val prevData = if (removeRaw) row.toSeq.drop(1) else row.toSeq

    Row.fromSeq(prevData ++ newData)
  }

  private def extractFormatter(formats: Option[String]): Option[Either[DateTimeFormatter, String]] = {
    formats match {
      case Some(format) =>
        format match {
          case "unix" => Some(Right("unix"))
          case "unixMillis" => Some(Right("unixMillis"))
          case "autoGenerated" => Some(Right("autoGenerated"))
          case "hive" => Some(Right("hive"))
          case _ => Some(Left(DateTimeParser.FormatMethods(format).invoke(None).asInstanceOf[DateTimeFormatter]))
        }
      case None => None
    }
  }

  private def extractAutoGeneratedOption: Boolean =
    extractFormatter(Formats) match {
      case Some(Right("unix")) => false
      case Some(Right("unixMillis")) => false
      case Some(Right("hive")) => false
      case Some(Left(formatter)) => false
      case _ => true
    }

  private def parseDate(inputValue: Any): DateTime = {
    extractFormatter(Formats) match {
      case Some(Right("unix")) =>
        new DateTime(inputValue.toString.toLong * 1000L)
      case Some(Right("unixMillis")) =>
        new DateTime(inputValue.toString.toLong)
      case Some(Right("hive")) =>
        new DateTime(getDateFromHiveFormat(inputValue.toString))
      case Some(Left(formatter)) =>
        formatter.parseDateTime(inputValue.toString)
      case _ =>
        throw new IllegalStateException(s"The format is not valid")
    }
  }

  private def applyGranularity(inputValue: DateTime): Long =
    GranularityProperty.fold(inputValue.getMillis) { granularity => truncateDate(inputValue, granularity) }

  private def getDateFromHiveFormat(hiveFormatDate: String): Date = {
    val sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss")
    sdf.setTimeZone(TimeZone.getTimeZone("UTC"))
    sdf.parse(hiveFormatDate)
  }
}

object DateTimeParser {

  val FormatMethods = classOf[ISODateTimeFormat].getMethods.toSeq.map(x => (x.getName, x)).toMap
}