sparta {

  api {
    host = 0.0.0.0
    port = 9090
    certificate-file = "/home/user/certifications/stratio.jks"
    certificate-password = "stratio"
  }

  swagger {
    host = 0.0.0.0
    port = 9091
  }

  config {
    executionMode = local
    rememberPartitioner = true
    stopGracefully = false //Necessary set to true in HA
    #stopGracefully = true //In cluster mode is recommended
    stopTimeout = 30000

    # The checkpoint path is autocalculated when is not defined
    #   checkpointPath = "/var/sds/sparta/checkpoint" #Default in local mode for Stratio Platform
    #   checkpointPath = "/user/stratio/sparta/checkpoint" #Default in cluster mode
    checkpointPath = "/tmp/sparta/checkpoint" //Default value in local mode for debug
  }

  local {
    spark.app.name = SPARTA
    spark.master = "local[*]"
    spark.driver.memory = 1G
    spark.driver.cores = 1
    spark.executor.memory = 1024m
    spark.app.name = SPARTA
    spark.sql.parquet.binaryAsString = true
    spark.streaming.concurrentJobs = 1
    #spark.metrics.conf = /opt/sds/sparta/benchmark/src/main/resources/metrics.properties
    #spark.serializer = org.apache.spark.serializer.KryoSerializer
  }

  hdfs {
    # The "hadoopUserName" variable is used to define the path for the files in HDFS
    hadoopUserName = root

    # If the variable HADOOP_CONF_DIR is not defined, "hdfsMaster" variable and "hdfsPort" are used to connect to HDFS cluster
    hdfsMaster = 127.0.0.1

    hdfsPort = 9000
    pluginsFolder = plugins
    executionJarFolder = jarDriver
    classpathFolder = classpath
  }

  mesos {
    sparkHome = ""
    deployMode = cluster
    numExecutors = 1
    master = "mesos://127.0.0.1:7077"
    spark.streaming.concurrentJobs = 1
    spark.mesos.extra.cores = 1
    spark.mesos.coarse = true
    spark.executor.memory = 1G
    spark.driver.cores = 1
    spark.driver.memory = 1G
    spark.app.name = SPARTA
    #spark.metrics.conf = /opt/sds/sparta/benchmark/src/main/resources/metrics.properties
    #spark.serializer = org.apache.spark.serializer.KryoSerializer
    #spark.executor.home=/opt/spark/dist
    #spark.mesos.executor.docker.image=dockerAccount/spark-version-docker
  }

  yarn {
    sparkHome = ""
    master = yarn-cluster
    deployMode = cluster
    numExecutors = 1
    executorMemory = 1G
    executorCores = 1
    spark.app.name = SPARTA
    #spark.metrics.conf = /opt/sds/sparta/benchmark/src/main/resources/metrics.properties
    #spark.serializer = org.apache.spark.serializer.KryoSerializer
  }

  standalone {
    sparkHome = ""
    master = "spark://127.0.0.1:7077"
    deployMode = cluster
    numExecutors = 1
    executorMemory = 1G
    executorCores = 1
    spark.app.name = SPARTA
    #spark.serializer = org.apache.spark.serializer.KryoSerializer
  }

  zookeeper {
    connectionString = "127.0.0.1:2181"
    connectionTimeout = 15000
    sessionTimeout = 60000
    retryAttempts = 5
    retryInterval = 10000
  }

  akka {
    controllerActorInstances = 5
  }
}

oauth2 {
  enable = "false"

  url {
    authorize = "https://server.domain:9005/cas/oauth2.0/authorize"
    accessToken = "https://server.domain:9005/cas/oauth2.0/accessToken"
    profile = "https://server.domain:9005/cas/oauth2.0/profile"
    logout = "https://server.domain:9005/cas/logout"
    callBack = "http://callback.domain:9090/login"
    onLoginGoTo = "/"
  }
  client{
    id = "userid"
    secret = "usersecret"
  }
  cookieName="user"
}

spray.can {
  server {
    ssl-encryption = "off"
  }
}