  {
    "name": "Kafka",
    "classPrettyName": "Kafka",
    "className": "KafkaOutputStep",
    "icon": "Kafka",
     "arity": ["NullaryToNullary", "NaryToNullary"],
     "supportedEngines": ["Streaming", "Batch"],
    "description": "Apache Kafka is publish-subscribe messaging rethought as a distributed commit log.",
    "properties": [
      {
        "propertyId": "bootstrap.servers",
        "propertyName": "_BOOTSTRAP_SERVERS_",
        "propertyType": "list",
        "required": true,
        "tooltip": "Sets the 'bootstrap.servers' property.",
        "qa": "fragment-details-kafka-bootstrap-servers",
        "fields": [
          {
            "propertyId": "host",
            "propertyName": "_HOST_",
            "propertyType": "text",
            "default": "{{{Environment.KAFKA_BROKER_HOST}}}",
            "required": true,
            "tooltip": "Kafka's address.",
             "width": 6,
            "qa": "fragment-details-kafka-host"
          },
          {
            "propertyId": "port",
            "propertyName": "_PORT_",
            "propertyType": "text",
            "default": "{{{Environment.KAFKA_BROKER_PORT}}}",
            "required": true,
            "tooltip": "Kafka's port.",
             "width": 5,
            "qa": "fragment-details-kafka-port"
          }
        ]
      },
      {
        "propertyId": "value.serializer.outputFormat",
        "propertyName": "_KAFKA_OUTPUT_FORMAT_",
        "propertyType": "select",
        "values": [
           {
              "label": "Row",
              "value": "ROW"
           },
           {
            "label": "Json",
            "value": "JSON"
           },
           {
              "label": "Avro",
              "value": "AVRO"
           },
           {
             "label": "Binary",
             "value": "BINARY"
           },
           {
            "label": "SchemaRegistry",
            "value": "SCHEMAREGISTRY"
           }
        ],
        "default": "ROW",
        "required": true,
        "qa": "fragment-details-kafka-outputFormat"
      },
      {
        "propertyId": "value.serializer.row.delimiter",
        "propertyName": "_KAFKA_ROW_SEPARATOR_",
        "propertyType": "text",
        "default": "{{{Global.DEFAULT_DELIMITER}}}",
        "required": false,
         "visible": [
            [
               {
                  "propertyId": "value.serializer.outputFormat",
                  "value": "ROW"
               }
            ]
         ],
        "tooltip": "Valid only with 'Row' as serializing format. Character used to parse the data being sent to Kafka.",
        "qa": "fragment-details-kafka-row-separator"
      },
       {
          "propertyId": "value.serializer.avro.schema.recordNamespace",
          "propertyName": "_KAFKA_AVRO_SCHEMA_RECORD_NAMESPACE_",
          "propertyType": "text",
          "required": false,
          "visibleOR": [
             [
                {
                   "propertyId": "value.serializer.outputFormat",
                   "value": "AVRO"
                },
               {
                 "propertyId": "value.serializer.outputFormat",
                 "value": "SCHEMAREGISTRY"
               }
             ]
          ],
          "tooltip": "Character located in-between records. Default value set to comma.",
          "qa": "fragment-details-kafka-avro-recordNamespace"
       },
       {
          "propertyId": "value.serializer.avro.schema.recordName",
          "propertyName": "_KAFKA_AVRO_SCHEMA_RECORD_NAME",
          "propertyType": "text",
          "required": false,
          "visibleOR": [
             [
                {
                   "propertyId": "value.serializer.outputFormat",
                   "value": "AVRO"
                },
               {
                 "propertyId": "value.serializer.outputFormat",
                 "value": "SCHEMAREGISTRY"
               }
             ]
          ],
          "tooltip": "Name given to the record.",
          "qa": "fragment-details-kafka-avro-topLevelRecord"
       },
       {
          "propertyId": "value.serializer.avro.schema.fromRow",
          "propertyName": "_KAFKA_AVRO_SCHEMA_FROM_ROW_",
          "propertyType": "boolean",
          "default": false,
          "required": false,
          "tooltip": "The schema will be automatically retrieved by the application from the output data.",
          "visible": [
             [
                {
                   "propertyId": "value.serializer.outputFormat",
                   "value": "AVRO"
                }
             ]
          ],

          "qa": "fragment-details-kafka-avro-fromRow"
       },
       {
          "propertyId": "value.serializer.avro.schema.provided",
          "propertyName": "_DESERIALIZER_AVRO_SCHEMA_",
          "propertyType": "textarea",
          "contentType": "JSON",
          "width": 12,
          "tooltip": "Avro schema expressed in JSON format.",
          "visible": [
             [
                {
                   "propertyId": "value.serializer.outputFormat",
                   "value": "AVRO"
                },
                {
                   "propertyId": "value.serializer.avro.schema.fromRow",
                   "value": false
                }
             ]
          ],
          "required": false,
          "qa": "workflow-transformation-json-schema-provided"
       },
      {
        "propertyId": "value.serializer.schema.registry.url",
        "propertyName": "_SERIALIZER_SCHEMAREGISTRY_SCHEMA_URL_",
        "propertyType": "text",
        "contentType": "URL",
        "width": 12,
        "tooltip": "Post the Schema Registry schema.",
        "default": "",
        "visible": [
          [
            {
              "propertyId": "value.serializer.outputFormat",
              "value": "SCHEMAREGISTRY"
            }
          ]
        ],
        "required": true,
        "qa": "fragment-details-kafka-deserializer-schemaRegistry-schema"
      },
      {
        "propertyId": "value.serializer.auto.register.schemas",
        "propertyName": "_SERIALIZER_SCHEMAREGISTRY_AUTO_REGISTER_SCHEMA_",
        "propertyType": "boolean",
        "tooltip": "Specify if the Serializer should attempt to register the Schema with Schema Registry\n",
        "default": true,
        "visible": [
          [
            {
              "propertyId": "value.serializer.outputFormat",
              "value": "SCHEMAREGISTRY"
            }
          ]
        ],
        "qa": "fragment-details-kafka-deserializer-auto-register-schema"
      },
       {
          "propertyId": "keySeparator",
          "propertyName": "_KEY_SEPARATOR_",
          "propertyType": "text",
          "default": "{{{Global.DEFAULT_DELIMITER}}}",
          "required": false,
          "tooltip": "Specifies the separator when a key or keys are used as partitioning values.",
          "qa": "fragment-details-kafka-keySeparator"
       },
      {
        "propertyId": "acks",
        "propertyName": "_ACKS_",
        "propertyType": "text",
        "default": "1",
        "required": false,
        "tooltip": "The number of acknowledgments the producer requires the leader to have received before considering a request complete. Allowed values [all, -1, 0, 1].",
        "qa": "fragment-details-kafka-request-required-acks"
      },
      {
        "propertyId": "batch.size",
        "propertyName": "_BATCH_NUM_MESSAGES_",
        "propertyType": "text",
        "default": "16384",
        "required": false,
        "tooltip": "The producer will attempt to batch records together into fewer requests whenever multiple records are being sent to the same partition.  This configuration controls the default batch size in bytes.",
        "qa": "fragment-details-kafka-batch-num-messages-size"
      },
      {
        "propertyId": "buffer.memory",
        "propertyName": "_BUFFER_MEMORY_",
        "propertyType": "text",
        "default": "33554432",
        "required": false,
        "tooltip": "The total bytes of memory the producer can use to buffer records waiting to be sent to the server. If records are sent faster than they can be delivered to the server the producer will block for max.block.ms after which it will throw an exception.",
        "qa": "fragment-details-kafka-buffer-memory"
      },
      {
        "propertyId": "security.protocol",
        "propertyName": "_SECURITY_PROTOCOL_",
        "propertyType": "select",
        "regexp": "PLAINTEXT|SSL",
        "values": [
          {
            "label": "PLAINTEXT",
            "value": "PLAINTEXT"
          },
          {
            "label": "SSL",
            "value": "SSL"
          }
        ],
        "default": "PLAINTEXT",
        "required": true,
        "qa": "fragment-details-kafka-security-protocol"
      },
      {
        "propertyId": "ssl.client.auth",
        "propertyName": "_SECURITY_AUTH_",
        "propertyType": "select",
        "values": [
          {
            "label": "none",
            "value": "none"
          },
          {
            "label": "required",
            "value": "required"
          },
          {
            "label": "requested",
            "value": "requested"
          }
        ],
        "default": "none",
        "required": true,
        "tooltip": "Client authentication. The use of requested is discouraged, as it provides a false sense of security and misconfigured clients can still connect.",
        "qa": "fragment-details-kafka-security-auth"
      },
      {
          "propertyId": "tlsEnabled",
          "propertyName": "_TLS_ENABLE_",
          "propertyType": "boolean",
          "tooltip": "Retrieves the necessary certificates from Vault and uses them to establish a TLS connection between Spark and Kafka.",
          "default": false,
          "qa": "fragment-details-kafka-tls"
       },
       {
          "propertyId": "errorSink",
          "propertyName": "_ERROR_SINK_",
          "propertyType": "boolean",
          "tooltip": "If checked, this output can be used to send error events. This feature can be configured through the errors management settings.",
          "default": false,
          "qa": "fragment-details-errorSink"
       },
      {
        "propertyId": "saveOptions",
        "propertyName": "_KAFKA_PROPERTIES_",
        "propertyType": "list",
        "required": false,
        "qa": "fragment-details-kafka-properties",
        "fields": [
          {
            "propertyId": "saveOptionsKey",
            "propertyName": "_KAFKA_PROPERTY_KEY_",
            "propertyType": "text",
             "width": 4,
            "required": false,
            "qa": "fragment-details-kafka-kafkaPropertyKey"
          },
          {
            "propertyId": "saveOptionsValue",
            "propertyName": "_KAFKA_PROPERTY_VALUE_",
            "propertyType": "text",
             "width": 4,
            "required": false,
            "qa": "fragment-details-kafka-kafkaPropertyValue"
          }
        ]
      }
    ]
  }
