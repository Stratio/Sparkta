{
  "name" : "NaiveBayes",
  "icon" : "NaiveBayes",
  "className" : "org.apache.spark.ml.classification.NaiveBayes",
  "category" : "Classification",
  "classPrettyName" : "NaiveBayes",
  "arity" : [ "NullaryToNullary", "NullaryToUnary", "UnaryToNullary", "UnaryToUnary" ],
  "supportedEngines" : [ "Batch" ],
  "description" : "PipelineStage: type = classification",
  "properties" : [ {
    "propertyId" : "featuresCol",
    "propertyName" : "Features column",
    "required" : true,
    "tooltip" : "The name of the column that will be the features of the NaiveBayes process.",
    "qa" : "",
    "default" : "features",
    "propertyType" : "select",
    "externalValueKey" : "externalInputs"
  }, {
    "propertyId" : "labelCol",
    "propertyName" : "Label column",
    "required" : true,
    "tooltip" : "The name of the column that will be the label of the NaiveBayes process.",
    "qa" : "",
    "default" : "label",
    "propertyType" : "select",
    "externalValueKey" : "externalInputs"
  }, {
    "propertyId" : "predictionCol",
    "propertyName" : "Prediction column",
    "required" : true,
    "tooltip" : "The name of the column that will be the prediction of the NaiveBayes process.",
    "qa" : "",
    "default" : "prediction",
    "propertyType" : "text"
  }, {
    "propertyId" : "probabilityCol",
    "propertyName" : "Probability column",
    "required" : true,
    "tooltip" : "Column name for predicted class conditional probabilities. Note: Not all models output well-calibrated probability estimates! These probabilities should be treated as confidences, not precise probabilities.",
    "qa" : "",
    "default" : "probability",
    "propertyType" : "text"
  }, {
    "propertyId" : "rawPredictionCol",
    "propertyName" : "Raw prediction column",
    "required" : true,
    "tooltip" : "The name of the column that will be the raw prediction (a.k.a. confidence) of the NaiveBayes process.",
    "qa" : "",
    "default" : "rawPrediction",
    "propertyType" : "text"
  }, {
    "propertyId" : "weightCol",
    "propertyName" : "Weight column",
    "required" : false,
    "tooltip" : "Weight column name. If this is not set or empty, we treat all instance weights as 1.0.",
    "qa" : "",
    "propertyType" : "select",
    "externalValueKey" : "externalInputs"
  }, {
    "propertyId" : "modelType",
    "propertyName" : "modelType",
    "required" : true,
    "tooltip" : "The model type which is a string (case-sensitive). Supported options: multinomial (default) and bernoulli.",
    "qa" : "",
    "values" : [ {
      "label" : "MULTINOMIAL",
      "value" : "multinomial"
    }, {
      "label" : "BERNOULLI",
      "value" : "bernoulli"
    } ],
    "default" : "multinomial",
    "propertyType" : "select"
  }, {
    "propertyId" : "smoothing",
    "propertyName" : "Smoothing",
    "required" : true,
    "tooltip" : "The smoothing parameter.",
    "qa" : "",
    "default" : "1.0",
    "propertyType" : "text"
  }, {
    "propertyId" : "thresholds",
    "propertyName" : "Thresholds (separated by comma)",
    "required" : false,
    "tooltip" : "(comma separated values) Thresholds in multi-class classification to adjust the probability of predicting each class. Array must have length equal to the number of classes, with values > 0 excepting that at most one value may be 0. The class with largest value p/t is predicted, where p is the original probability of that class and t is the class's threshold.",
    "qa" : "",
    "propertyType" : "text"
  } ]
}