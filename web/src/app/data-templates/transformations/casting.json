{
   "name": "Casting",
   "icon": "Casting",
   "category": "Row",
   "className": "CastingTransformStep",
   "classPrettyName": "Casting",
   "arity": [
      "UnaryToNary"
   ],
   "supportedEngines": [
      "Streaming",
      "Batch"
   ],
   "supportedDataRelations": [
      "ValidData",
      "DiscardedData"
   ],
   "description": "Casts input fields to other types. Advanced Spark types conversions are supported.",
   "properties": [
      {
         "propertyId": "outputFieldsFrom",
         "propertyName": "_OUTPUT_FIELDS_FROM_",
         "required": true,
         "propertyType": "select",
         "default": "FIELDS",
         "values": [
            {
               "label": "String",
               "value": "STRING"
            },
            {
               "label": "Fields",
               "value": "FIELDS"
            }
         ],
         "tooltip": "Output fields definition. The user may choose between providing a string in JSON or Spark format or using the field model definition.",
         "qa": "fragment-details-casting-outputFieldsFrom"
      },
      {
         "propertyId": "fieldsString",
         "propertyName": "_FIELDS_DEFINITION_STRING_",
         "propertyType": "textarea",
         "contentType": "JSON",
         "width": 12,
         "visible": [
            [
               {
                  "propertyId": "outputFieldsFrom",
                  "value": "STRING"
               }
            ]
         ],
         "required": true,
         "tooltip": "Schema definition in JSON or Spark format.",
         "qa": "fragment-details-casting-fieldsString"
      },
      {
         "propertyId": "fields",
         "propertyName": "_FIELDS_DEFINITION_",
         "propertyType": "list",
         "required": true,
         "tooltip": "Schema definition from list of fields.",
         "qa": "fragment-details-casting-fields",
         "visible": [
            [
               {
                  "propertyId": "outputFieldsFrom",
                  "value": "FIELDS"
               }
            ]
         ],
         "fields": [
            {
               "propertyId": "name",
               "propertyName": "_NAME_",
               "propertyType": "text",
               "required": true,
               "width": 4,
               "qa": "fragment-details-field-name"
            },
            {
               "propertyId": "type",
               "propertyName": "_TYPE_",
               "propertyType": "select",
               "custom": true,
               "width": 4,
               "required": true,
               "values": [
                  {
                     "label": "String",
                     "value": "string"
                  },
                  {
                     "label": "Long",
                     "value": "long"
                  },
                  {
                     "label": "Float",
                     "value": "float"
                  },
                  {
                     "label": "Double",
                     "value": "double"
                  },
                  {
                     "label": "Integer",
                     "value": "integer"
                  },
                  {
                     "label": "Boolean",
                     "value": "boolean"
                  },
                  {
                     "label": "Binary",
                     "value": "binary"
                  },
                  {
                     "label": "Date",
                     "value": "date"
                  },
                  {
                     "label": "Timestamp",
                     "value": "timestamp"
                  },
                  {
                     "label": "Array(Double)",
                     "value": "arraydouble"
                  },
                  {
                     "label": "Array(String)",
                     "value": "arraystring"
                  },
                  {
                     "label": "Array(Long)",
                     "value": "arraylong"
                  },
                  {
                     "label": "Array(Integer)",
                     "value": "arrayinteger"
                  },
                  {
                     "label": "Array(Map(String, String))",
                     "value": "arraymapstringstring"
                  },
                  {
                     "label": "Map(String, Long)",
                     "value": "mapstringlong"
                  },
                  {
                     "label": "Map(String, Double)",
                     "value": "mapstringdouble"
                  },
                  {
                     "label": "Map(String, Integer)",
                     "value": "mapstringint"
                  },
                  {
                     "label": "Map(String, String)",
                     "value": "mapstringstring"
                  }
               ],
               "default": "string",
               "qa": "fragment-details-field-type"
            },
            {
               "propertyId": "nullable",
               "propertyName": "_NULLABLE_",
               "propertyType": "boolean",
               "default": true,
               "required": true,
               "qa": "fragment-details-field-nullable"
            }
         ]
      },
      {
         "propertyId": "inputSchemas",
         "propertyName": "_INPUTS_TRIGGER_SCHEMA_",
         "propertyType": "list",
         "required": false,
         "complexForm": true,
         "tooltip": "Section that allows the user to define incoming steps schemas. Once defined properly, the schema calculation for all incoming inputs will be avoided thus increasing the workflow performance and type-safety.",
         "qa": "fragment-details-schema-fields",
         "fields": [
            {
               "propertyId": "stepName",
               "propertyName": "_INPUT_STEP_NAME_",
               "propertyType": "text",
               "required": true,
               "tooltip": "Incoming step name.",
               "width": 6,
               "float": false,
               "qa": "fragment-details-field-name"
            },
            {
               "propertyId": "schema",
               "propertyName": "_DESERIALIZER_SCHEMA_",
               "propertyType": "textarea",
               "contentType": "JSON",
               "width": 12,
               "tooltip": "Input schema either expressed in JSON/Spark format or by providing a valid sample.",
               "required": true,
               "qa": "fragment-details-field-query"
            }
         ]
      },
      {
         "propertyId": "whenRowError",
         "propertyName": "_TRANSFORMATION_WHEN_ROW_ERROR_",
         "propertyType": "select",
         "values": [
            {
               "label": "Error",
               "value": "RowError"
            },
            {
               "label": "Discard",
               "value": "RowDiscard"
            }
         ],
         "tooltip": "Specifies which policy to follow when a row-level error arises. If 'Error' is chosen, the application will stop and the error trace will be written to the log. If 'Discard' is chosen, no error will be prompted and the row will be omitted.",
         "qa": "workflow-transformation-whenRowError"
      },
      {
         "propertyId": "whenFieldError",
         "propertyName": "_TRANSFORMATION_WHEN_FIELD_ERROR_",
         "propertyType": "select",
         "values": [
            {
               "label": "Error",
               "value": "FieldError"
            },
            {
               "label": "Null",
               "value": "Null"
            }
         ],
         "tooltip": "Specifies which policy to follow when a field-level error arises. If 'Error' is chosen, the application will stop and the error trace will be written to the log. If 'Null' is chosen, no error will be prompted and the field value will be set to null.",
         "qa": "workflow-transformation-whenFieldError"
      }
   ]
}
