{
  "name": "DropDuplicates",
  "icon": "DropDuplicates",
  "category": "SQL",
  "className": "DropDuplicatesTransformStep",
  "classPrettyName": "DropDuplicates",
  "arity": [
    "UnaryToNary"
  ],
  "supportedEngines": [
    "Streaming",
    "Batch"
  ],
  "supportedDataRelations": [
    "ValidData",
    "DiscardedData"
  ],
  "description": "Drop duplicate events in the input data.",
  "properties": [
    {
      "propertyId": "columns",
      "propertyName": "_COLUMNS_",
      "width": 8,
      "propertyType": "list",
      "required": false,
      "tooltip": "Column(s) that indicates the primary key(s) to be used for detecting and dropping duplicates.",
      "qa": "fragment-details-dropDuplicates-columns",
      "fields": [
        {
          "propertyId": "name",
          "propertyName": "_COLUMN_NAME_",
          "propertyType": "text",
          "width": 4,
          "required": true,
          "tooltip": "Name of the column",
          "hidden": false,
          "qa": "fragment-details-dropDuplicates-columns-name"
        }
      ]
    },
    {
      "propertyId": "discardConditions",
      "propertyName": "_DISCARD_CONDITIONS_",
      "propertyType": "list",
      "required": false,
      "width": 8,
      "tooltip": "Conditions to compare the previous data with the generated data in order to extract the previous data that is not present in the result",
      "qa": "fragment-details-discard-conditions",
      "fields": [
        {
          "propertyId": "previousField",
          "propertyName": "_PREVIOUS_FIELD_",
          "propertyType": "text",
          "required": true,
          "width": 3,
          "tooltip": "Field to compare in the previous data",
          "qa": "fragment-details-previousField"
        },
        {
          "propertyId": "transformedField",
          "propertyName": "_TRANSFORMED_FIELD_",
          "propertyType": "text",
          "tooltip": "Field to compare in the generated data",
          "required": true,
          "width": 3,
          "qa": "fragment-details-transformedField"
        }
      ]
    },
     {
        "propertyId": "inputSchemas",
        "propertyName": "_INPUTS_TRIGGER_SCHEMA_",
        "propertyType": "list",
        "required": false,
        "complexForm": true,
        "tooltip": "Section that allows the user to define incoming steps schemas. Once defined properly, the schema calculation for all incoming inputs will be avoided thus increasing the workflow performance and type-safety.",
        "qa": "fragment-details-schema-fields",
        "fields": [
           {
              "propertyId": "stepName",
              "propertyName": "_INPUT_STEP_NAME_",
              "propertyType": "text",
              "required": true,
              "tooltip": "Incoming step name.",
              "width": 3,
              "float": false,
              "qa": "fragment-details-field-name"
           },
           {
              "propertyId": "schema",
              "propertyName": "_DESERIALIZER_SCHEMA_",
              "propertyType": "textarea",
              "contentType": "JSON",
              "width": 8,
              "tooltip": "Input schema either expressed in JSON/Spark format or by providing a valid sample.",
              "required": true,
              "qa": "fragment-details-field-query"
           }
        ]
     }
  ]
}
