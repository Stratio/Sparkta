{
   "name": "JsonPath",
   "icon": "JsonPath",
   "category": "Row",
   "className": "JsonPathTransformStep",
   "classPrettyName": "JsonPath",
   "supportedEngines": [
      "Streaming",
      "Batch"
   ],
   "supportedDataRelations": [
      "ValidData",
      "DiscardedData"
   ],
   "arity": [
      "UnaryToNary"
   ],
   "description": "Parses a string with JSON format using a list of defined of typed columns",
   "properties": [
      {
         "propertyId": "inputField",
         "propertyName": "_INPUT_FIELD_",
         "propertyType": "text",
         "showSchemaFields": true,
         "required": true,
         "tooltip": "Field containing the JSON string",
         "qa": "fragment-details-casting-fieldsString"
      },
      {
         "propertyId": "fieldsPreservationPolicy",
         "propertyName": "_FIELDS_PRESERVATION_",
         "required": true,
         "propertyType": "select",
         "default": "REPLACE",
         "values": [
            {
               "label": "Replacing input field",
               "value": "REPLACE"
            },
            {
               "label": "Appending extracted",
               "value": "APPEND"
            },
            {
               "label": "Keeping just extracted",
               "value": "JUST_EXTRACTED"
            }
         ],
         "tooltip": "The user might choose between 3 modes. If 'Replacing input field' is chosen the resulting data will be saved in the position occupied by the input field. 'Appending extracted' will add the data at the end of the row and lastly 'Keeping just extracted' will only keep the transformed data discarding the received.",
         "qa": "workflow-transformation-jsonpath-fieldsPreservationPolicy"
      },
      {
         "propertyId": "queries",
         "propertyName": "_QUERIES_",
         "propertyType": "list",
         "required": true,
         "tooltip": "Schema definition from list of typed fields.",
         "qa": "fragment-details-casting-fields",
         "fields": [
            {
               "propertyId": "field",
               "propertyName": "_FIELD_",
               "propertyType": "text",
               "required": true,
               "width": 4,
               "tooltip": "Field name given to the parsed field. It's not a requirement to match the name found in the input string.",
               "qa": "fragment-details-field-name"
            },
            {
               "propertyId": "query",
               "propertyName": "_QUERY_",
               "propertyType": "text",
               "width": 4,
               "required": true,
               "tooltip": "Query used to search in the input string. The syntax used is as follows: '$.field / $.field.object[*].field'. For further information, please refer to the Jayway JsonPath documentation.",
               "qa": "fragment-details-field-query"
            },
            {
               "propertyId": "type",
               "propertyName": "_TYPE_",
               "propertyType": "select",
               "custom": true,
               "required": true,
               "values": [
                  {
                     "label": "String",
                     "value": "string"
                  },
                  {
                     "label": "Long",
                     "value": "long"
                  },
                  {
                     "label": "Float",
                     "value": "float"
                  },
                  {
                     "label": "Double",
                     "value": "double"
                  },
                  {
                     "label": "Integer",
                     "value": "integer"
                  },
                  {
                     "label": "Boolean",
                     "value": "boolean"
                  },
                  {
                     "label": "Binary",
                     "value": "binary"
                  },
                  {
                     "label": "Date",
                     "value": "date"
                  },
                  {
                     "label": "Timestamp",
                     "value": "timestamp"
                  },
                  {
                     "label": "Array(Double)",
                     "value": "arraydouble"
                  },
                  {
                     "label": "Array(String)",
                     "value": "arraystring"
                  },
                  {
                     "label": "Array(Long)",
                     "value": "arraylong"
                  },
                  {
                     "label": "Array(Integer)",
                     "value": "arrayinteger"
                  },
                  {
                     "label": "Array(Map(String, String))",
                     "value": "arraymapstringstring"
                  },
                  {
                     "label": "Map(String, Long)",
                     "value": "mapstringlong"
                  },
                  {
                     "label": "Map(String, Double)",
                     "value": "mapstringdouble"
                  },
                  {
                     "label": "Map(String, Integer)",
                     "value": "mapstringint"
                  },
                  {
                     "label": "Map(String, String)",
                     "value": "mapstringstring"
                  }
               ],
               "default": "string",
               "width": 3,
               "qa": "fragment-details-field-type"
            }
         ]
      },
      {
         "propertyId": "inputSchemas",
         "propertyName": "_INPUTS_TRIGGER_SCHEMA_",
         "propertyType": "list",
         "required": false,
         "complexForm": true,
         "tooltip": "Section that allows the user to define incoming steps schemas. If defined properly this would result in avoiding doing the schema calculation for all defined incoming inputs.",
         "qa": "fragment-details-schema-fields",
         "fields": [
            {
               "propertyId": "stepName",
               "propertyName": "_INPUT_STEP_NAME_",
               "propertyType": "text",
               "showInputSteps": true,
               "required": true,
               "tooltip": "Incoming step name.",
               "width": 8,
               "float": false,
               "qa": "fragment-details-field-name"
            },
            {
               "propertyId": "schema",
               "propertyName": "_DESERIALIZER_SCHEMA_",
               "propertyType": "textarea",
               "contentType": "JSON",
               "width": 12,
               "tooltip": "Schema expressed in JSON/Spark format or from a valid sample from the input being defined.",
               "required": true,
               "qa": "fragment-details-field-query"
            }
         ]
      },
      {
         "propertyId": "supportNullValues",
         "propertyName": "_SUPPORT_NULL_VALUES_",
         "propertyType": "boolean",
         "default": true,
         "tooltip": "If checked, fields with null values will be supported. Otherwise, an error will be generated and the policy chosen for error handling will be applied.",
         "qa": "workflow-transformation-json-supportNullValues"
      },
      {
         "propertyId": "whenRowError",
         "propertyName": "_TRANSFORMATION_WHEN_ROW_ERROR_",
         "propertyType": "select",
         "values": [
            {
               "label": "Error",
               "value": "RowError"
            },
            {
               "label": "Discard",
               "value": "RowDiscard"
            }
         ],
         "tooltip": "Specifies which policy to follow when a row-level error arises. If 'Error' is chosen, the application will stop and the error trace will be written to the log. If 'Discard' is chosen, no error will be prompted and the row will be omitted.",
         "qa": "workflow-transformation-whenRowError"
      },
      {
         "propertyId": "whenFieldError",
         "propertyName": "_TRANSFORMATION_WHEN_FIELD_ERROR_",
         "propertyType": "select",
         "values": [
            {
               "label": "Error",
               "value": "FieldError"
            },
            {
               "label": "Null",
               "value": "Null"
            }
         ],
         "tooltip": "Specifies which policy to follow when a field-level error arises. If 'Error' is chosen, the application will stop and the error trace will be written to the log. If 'Null' is chosen, no error will be prompted and the field value will be set to null.",
         "qa": "workflow-transformation-whenFieldError"
      }
   ]
}
