{
   "name": "Json",
   "icon": "Json",
   "category": "Row",
   "className": "JsonTransformStep",
   "classPrettyName": "Json",
   "arity": [
      "UnaryToNary"
   ],
   "supportedEngines": [
      "Streaming",
      "Batch"
   ],
   "supportedDataRelations": [
      "ValidData",
      "DiscardedData"
   ],
   "description": "Parses an input field in text format to row",
   "properties": [
      {
         "propertyId": "inputField",
         "propertyName": "_INPUT_FIELD_",
         "propertyType": "text",
         "required": true,
         "tooltip": "Field containing the JSON string",
         "qa": "fragment-details-casting-fieldsString"
      },
      {
         "propertyId": "fieldsPreservationPolicy",
         "propertyName": "_FIELDS_PRESERVATION_",
         "required": true,
         "propertyType": "select",
         "default": "REPLACE",
         "values": [
            {
               "label": "Replacing input field",
               "value": "REPLACE"
            },
            {
               "label": "Appending extracted",
               "value": "APPEND"
            },
            {
               "label": "Keeping just extracted",
               "value": "JUST_EXTRACTED"
            }
         ],
         "tooltip": "The user might choose between 3 modes. If 'Replacing input field' is chosen the resulting data will be saved in the position occupied by the input field. 'Appending extracted' will add the data at the end of the row and lastly 'Keeping just extracted' will only keep the transformed data discarding the received.",
         "qa": "workflow-transformation-json-fieldsPreservationPolicy"
      },
      {
         "propertyId": "schema.fromRow",
         "propertyName": "_SCHEMA_FROM_ROW_",
         "propertyType": "boolean",
         "required": true,
         "default": true,
         "tooltip": "If checked, the row schema will be automatically inferred from its content.",
         "qa": "workflow-transformation-json-schema-fromRow"
      },
      {
         "propertyId": "schema.inputMode",
         "propertyName": "_INPUT_SCHEMA_FROM_",
         "propertyType": "select",
         "visible": [
            [
               {
                  "propertyId": "schema.fromRow",
                  "value": false
               }
            ]
         ],
         "values": [
            {
               "label": "Spark format",
               "value": "SPARKFORMAT"
            },
            {
               "label": "Example",
               "value": "EXAMPLE"
            }
         ],
         "default": "SPARKFORMAT",
         "required": true,
         "qa": "workflow-transformation-json-schema-mode"
      },
      {
         "propertyId": "schema.provided",
         "propertyName": "_DESERIALIZER_SCHEMA_",
         "propertyType": "textarea",
         "contentType": "JSON",
         "width": 8,
         "tooltip": "Schema expressed in JSON/Spark format or from a valid sample from the input data being transformed.",
         "default": "",
         "visible": [
            [
               {
                  "propertyId": "schema.fromRow",
                  "value": false
               }
            ]
         ],
         "required": false,
         "qa": "workflow-transformation-json-schema-provided"
      },
      {
         "propertyId": "inputSchemas",
         "propertyName": "_INPUTS_TRIGGER_SCHEMA_",
         "propertyType": "list",
         "required": false,
         "complexForm": true,
         "tooltip": "Section that allows the user to define incoming steps schemas. Once defined properly, the schema calculation for all incoming inputs will be avoided thus increasing the workflow performance and type-safety.",
         "qa": "fragment-details-schema-fields",
         "fields": [
            {
               "propertyId": "stepName",
               "propertyName": "_INPUT_STEP_NAME_",
               "propertyType": "text",
               "required": true,
               "tooltip": "Incoming step name.",
               "width": 3,
               "float": false,
               "qa": "fragment-details-field-name"
            },
            {
               "propertyId": "schema",
               "propertyName": "_DESERIALIZER_SCHEMA_",
               "propertyType": "textarea",
               "contentType": "JSON",
               "width": 8,
               "tooltip": "Input schema either expressed in JSON/Spark format or by providing a valid sample.",
               "required": true,
               "qa": "fragment-details-field-query"
            }
         ]
      },
      {
         "propertyId": "whenRowError",
         "propertyName": "_TRANSFORMATION_WHEN_ROW_ERROR_",
         "propertyType": "select",
         "values": [
            {
               "label": "Error",
               "value": "RowError"
            },
            {
               "label": "Discard",
               "value": "RowDiscard"
            }
         ],
         "tooltip": "Specifies which policy to follow when a row-level error arises. If 'Error' is chosen, the application will stop and the error trace will be written to the log. If 'Discard' is chosen, no error will be prompted and the row will be omitted.",
         "qa": "workflow-transformation-whenRowError"
      },
      {
         "propertyId": "whenFieldError",
         "propertyName": "_TRANSFORMATION_WHEN_FIELD_ERROR_",
         "propertyType": "select",
         "values": [
            {
               "label": "Error",
               "value": "FieldError"
            },
            {
               "label": "Null",
               "value": "Null"
            }
         ],
         "tooltip": "Specifies which policy to follow when a field-level error arises. If 'Error' is chosen, the application will stop and the error trace will be written to the log. If 'Null' is chosen, no error will be prompted and the field value will be set to null.",
         "qa": "workflow-transformation-whenFieldError"
      }
   ]
}
