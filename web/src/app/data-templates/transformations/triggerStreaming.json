{
   "name": "Trigger",
   "icon": "Trigger",
   "category": "SQL",
   "className": "TriggerTransformStep",
   "supportedEngines": [
      "Streaming"
   ],
   "supportedDataRelations": [
      "ValidData",
      "DiscardedData"
   ],
   "crossdataCatalog": true,
   "classPrettyName": "Trigger",
   "arity": [
      "BinaryToNary",
      "UnaryToNary"
   ],
   "description": "Execute a trigger following the SparkSQL syntax.",
   "properties": [
      {
         "propertyId": "sql",
         "propertyName": "_SQL_",
         "propertyType": "textarea",
         "contentType": "SQL",
         "width": 12,
         "required": true,
         "tooltip": "Query in SQL language. Refer to the SParkSQL documentation for more information on supported operations.",
         "qa": "fragment-details-trigger-sql"
      },
      {
         "propertyId": "discardConditions",
         "propertyName": "_DISCARD_CONDITIONS_",
         "propertyType": "list",
         "required": false,
         "width": 12,
         "tooltip": "Conditions to compare the previous data with the generated data in order to extract the previous data that is not present in the result.",
         "qa": "fragment-details-discard-conditions",
         "fields": [
            {
               "propertyId": "previousField",
               "propertyName": "_PREVIOUS_FIELD_",
               "propertyType": "text",
               "showSchemaFields": true,
               "required": true,
               "width": 4,
               "tooltip": "Field to compare with in the previous step data.",
               "qa": "fragment-details-previousField"
            },
            {
               "propertyId": "transformedField",
               "propertyName": "_TRANSFORMED_FIELD_",
               "propertyType": "text",
               "tooltip": "Field to compare with in the generated data.",
               "required": true,
               "width": 4,
               "qa": "fragment-details-transformedField"
            }
         ]
      },
      {
         "propertyId": "inputSchemas",
         "propertyName": "_INPUTS_TRIGGER_SCHEMA_",
         "propertyType": "list",
         "required": false,
         "complexForm": true,
         "tooltip": "Section that allows the user to define incoming steps schemas. Once defined properly, the schema calculation for all incoming inputs will be avoided thus increasing the workflow performance and type-safety.",
         "qa": "fragment-details-schema-fields",
         "fields": [
            {
               "propertyId": "stepName",
               "propertyName": "_INPUT_STEP_NAME_",
               "propertyType": "text",
               "showInputSteps": true,
               "required": true,
               "tooltip": "Incoming step name.",
               "width": 3,
               "float": false,
               "qa": "fragment-details-field-name"
            },
            {
               "propertyId": "schema",
               "propertyName": "_DESERIALIZER_SCHEMA_",
               "propertyType": "textarea",
               "contentType": "JSON",
               "width": 8,
               "tooltip": "Input schema either expressed in JSON/Spark format or by providing a valid sample.",
               "required": true,
               "qa": "fragment-details-field-query"
            }
         ]
      },
      {
         "propertyId": "executeSqlWhenEmpty",
         "propertyName": "_EXECUTE_WHEN_EMPTY_",
         "propertyType": "boolean",
         "default": true,
         "required": true,
         "width": 12,
         "tooltip": "Execute the query when any, or both, of the steps are empty and no schema is provided. This is a useful feature when the query contains joins.",
         "qa": "fragment-trigger-executeSqlWhenEmpty"
      }
   ]
}
