{
   "name": "Window",
   "icon": "Window",
   "category": "Spark Native",
   "className": "WindowTransformStep",
   "classPrettyName": "Window",
   "supportedEngines": [
      "Streaming"
   ],
   "supportedDataRelations": [
      "ValidData"
   ],
   "arity": [
      "UnaryToNary"
   ],
   "description": "Return a new DStream in which each RDD contains all the elements in seen in a sliding window of time over this DStream.",
   "properties": [
      {
         "propertyId": "overLast",
         "propertyName": "_OVER_LAST_",
         "propertyType": "text",
         "required": false,
         "tooltip": "Width of the window; must be a multiple of this DStream's batching interval",
         "qa": "fragment-details-window-overLast"
      },
      {
         "propertyId": "computeEvery",
         "propertyName": "_COMPUTE_EVERY_",
         "propertyType": "text",
         "required": false,
         "tooltip": "Sliding interval of the window (i.e., the interval after which the new DStream will generate RDDs); must be a multiple of this DStream's batching interval",
         "qa": "fragment-details-window-computeEvery"
      },
      {
         "propertyId": "discardConditions",
         "propertyName": "_DISCARD_CONDITIONS_",
         "propertyType": "list",
         "required": false,
         "tooltip": "Conditions to compare the previous data with the generated data in order to extract the previous data that is not present in the result.",
         "qa": "fragment-details-discard-conditions",
         "fields": [
            {
               "propertyId": "previousField",
               "propertyName": "_PREVIOUS_FIELD_",
               "propertyType": "text",
               "showSchemaFields": true,
               "required": true,
               "width": 4,
               "tooltip": "Field to compare with in the previous step data.",
               "qa": "fragment-details-previousField"
            },
            {
               "propertyId": "transformedField",
               "propertyName": "_TRANSFORMED_FIELD_",
               "propertyType": "text",
               "showSchemaFields": true,
               "tooltip": "Field to compare with in the generated data.",
               "required": true,
               "width": 4,
               "qa": "fragment-details-transformedField"
            }
         ]
      },
      {
         "propertyId": "inputSchemas",
         "propertyName": "_INPUTS_TRIGGER_SCHEMA_",
         "propertyType": "list",
         "required": false,
         "complexForm": true,
         "tooltip": "Section that allows the user to define incoming steps schemas. Once defined properly, the schema calculation for all incoming inputs will be avoided thus increasing the workflow performance and type-safety.",
         "qa": "fragment-details-schema-fields",
         "fields": [
            {
               "propertyId": "stepName",
               "propertyName": "_INPUT_STEP_NAME_",
               "propertyType": "text",
               "showInputSteps": true,
               "required": true,
               "tooltip": "Incoming step name.",
               "width": 8,
               "float": false,
               "qa": "fragment-details-field-name"
            },
            {
               "propertyId": "schema",
               "propertyName": "_DESERIALIZER_SCHEMA_",
               "propertyType": "textarea",
               "contentType": "JSON",
               "width": 12,
               "tooltip": "Input schema either expressed in JSON/Spark format or by providing a valid sample.",
               "required": true,
               "qa": "fragment-details-field-query"
            }
         ]
      }
   ]
}
