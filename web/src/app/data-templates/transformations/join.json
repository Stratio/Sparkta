{
   "name": "Join",
   "icon": "Join",
   "category": "SQL",
   "className": "JoinTransformStep",
   "supportedEngines": [
      "Batch",
      "Streaming"
   ],
   "supportedDataRelations": [
      "ValidData"
   ],
   "classPrettyName": "Join",
   "arity": [
      "BinaryToNary"
   ],
   "description": "Executes a join between two steps.",
   "properties": [
      {
         "propertyId": "leftTable",
         "propertyName": "_JOIN_LEFT_TABLE_",
         "propertyType": "text",
         "showInputSteps": true,
         "required": true,
         "tooltip": "Select the left table in the join sentence.",
         "qa": "fragment-details-join-leftTable"
      },
      {
         "propertyId": "rightTable",
         "propertyName": "_JOIN_RIGHT_TABLE_",
         "propertyType": "text",
         "showInputSteps": true,
         "required": true,
         "tooltip": "Select the right table in the join sentence.",
         "qa": "fragment-details-join-leftTable"
      },
      {
         "propertyId": "joinType",
         "propertyName": "_JOIN_TYPE_",
         "required": true,
         "propertyType": "select",
         "tooltip": "Join type to be executed. This list represents every kind of join supported by SparkSQL.",
         "default": "INNER",
         "values": [
            {
               "label": "Inner",
               "value": "INNER"
            },
            {
               "label": "Full",
               "value": "FULL"
            },
            {
               "label": "Cross",
               "value": "CROSS"
            },
            {
               "label": "Left",
               "value": "LEFT"
            },
            {
               "label": "Left only",
               "value": "LEFT_ONLY"
            },
            {
               "label": "Right",
               "value": "RIGHT"
            },
            {
               "label": "Right only",
               "value": "RIGHT_ONLY"
            },
            {
               "label": "Left and right only",
               "value": "LEFT_RIGHT_ONLY"
            }
         ],
         "qa": "workflow-transformation-join-type"
      },
      {
         "propertyId": "joinReturn",
         "propertyName": "_JOIN_RETURN_",
         "required": true,
         "propertyType": "select",
         "default": "ALL",
         "values": [
            {
               "label": "All",
               "value": "ALL"
            },
            {
               "label": "Left",
               "value": "LEFT"
            },
            {
               "label": "Right",
               "value": "RIGHT"
            },
            {
               "label": "Selected",
               "value": "COLUMNS"
            }
         ],
         "tooltip": "Determines which columns of the join will be returned: the user can either select all columns, all the columns from the left or the right table or just a customized set of columns.",
         "qa": "workflow-transformation-join-return"
      },
      {
         "propertyId": "joinReturnColumns",
         "propertyName": "_JOIN_RETURN_COLUMNS_",
         "propertyType": "list",
         "required": false,
         "tooltip": "List of columns to be returned after the join.",
         "qa": "fragment-details-join-return-columns",
         "fields": [
            {
               "propertyId": "tableSide",
               "propertyName": "_JOIN_RETURN_SIDE_",
               "required": true,
               "width": 3,
               "propertyType": "select",
               "default": "LEFT",
               "values": [
                  {
                     "label": "Left",
                     "value": "LEFT"
                  },
                  {
                     "label": "Right",
                     "value": "RIGHT"
                  }
               ],
               "qa": "fragment-details-join-return-side"
            },
            {
               "propertyId": "column",
               "propertyName": "_JOIN_RETURN_COLUMN_",
               "propertyType": "text",
               "showSchemaFields": true,
               "required": true,
               "width": 4,
               "tooltip": "Column name on input table.",
               "qa": "fragment-details-join-return-column"
            },
            {
               "propertyId": "alias",
               "propertyName": "_JOIN_RETURN_ALIAS_",
               "propertyType": "text",
               "width": 4,
               "tooltip": "Alias/new name assigned to the declared column. This field is not mandatory.",
               "required": false,
               "qa": "fragment-details-join-return-column"
            }
         ],
         "visible": [
            [
               {
                  "propertyId": "joinReturn",
                  "value": "COLUMNS"
               }
            ]
         ]
      },
      {
         "propertyId": "joinConditions",
         "propertyName": "_JOIN_CONDITIONS_",
         "propertyType": "list",
         "required": true,
         "tooltip": "Field(s) used as join condition(s). The selected field(s) must exist in both tables and have matching types.",
         "qa": "fragment-details-join-conditions",
         "fields": [
            {
               "propertyId": "leftField",
               "propertyName": "_JOIN_CONDITION_LEFT_",
               "propertyType": "text",
               "showSchemaFields": true,
               "required": true,
               "width": 4,
               "tooltip": "Left table field (leftFieldID) used in the join condition 'leftFieldID = rightFieldID'",
               "qa": "fragment-details-join-conditions-left"
            },
            {
               "propertyId": "rightField",
               "propertyName": "_JOIN_CONDITION_RIGHT_",
               "propertyType": "text",
               "showSchemaFields": true,
               "width": 4,
               "tooltip": "Right table field (rightFieldID) used in the join condition 'leftFieldID = rightFieldID'",
               "required": true,
               "qa": "fragment-details-join-conditions-right"
            }
         ],
         "visibleOR": [
            [
               {
                  "propertyId": "joinType",
                  "value": "INNER"
               },
               {
                  "propertyId": "joinType",
                  "value": "FULL"
               },
               {
                  "propertyId": "joinType",
                  "value": "LEFT"
               },
               {
                  "propertyId": "joinType",
                  "value": "LEFT_ONLY"
               },
               {
                  "propertyId": "joinType",
                  "value": "RIGHT"
               },
               {
                  "propertyId": "joinType",
                  "value": "RIGHT_ONLY"
               },
               {
                  "propertyId": "joinType",
                  "value": "LEFT_RIGHT_ONLY"
               }
            ]
         ]
      },
      {
         "propertyId": "inputSchemas",
         "propertyName": "_INPUTS_TRIGGER_SCHEMA_",
         "propertyType": "list",
         "required": false,
         "complexForm": true,
         "tooltip": "Section that allows the user to define incoming steps schemas. Once defined properly, the schema calculation for all incoming inputs will be avoided thus increasing the workflow performance and type-safety.",
         "qa": "fragment-details-schema-fields",
         "fields": [
            {
               "propertyId": "stepName",
               "propertyName": "_INPUT_STEP_NAME_",
               "propertyType": "text",
               "showInputSteps": true,
               "required": true,
               "tooltip": "Incoming step name.",
               "width": 8,
               "float": false,
               "qa": "fragment-details-field-name"
            },
            {
               "propertyId": "schema",
               "propertyName": "_DESERIALIZER_SCHEMA_",
               "propertyType": "textarea",
               "contentType": "JSON",
               "width": 12,
               "tooltip": "Input schema either expressed in JSON/Spark format or by providing a valid sample.",
               "required": true,
               "qa": "fragment-details-field-query"
            }
         ]
      }
   ]
}
