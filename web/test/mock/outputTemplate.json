[
  {
    "name": "CSV",
    "modelType": "Csv",
    "description": {
      "short": "",
      "long": "",
      "learnMore": "http://docs.stratio.com"
    },
    "properties": [
      {
        "propertyId": "path",
        "propertyName": "_PATH_",
        "propertyType": "text",
        "regexp": "^[a-zA-Z0-9:_\\.\\-\\+/\\\\]{2,}\\.csv$",
        "default": "path_to_csv.csv",
        "required": true,
        "qa": "fragment-details-csv-path"
      },
      {
        "propertyId": "header",
        "propertyName": "_HEADER_",
        "propertyType": "boolean",
        "regexp": "true|false",
        "default": false,
        "required": false,
        "qa": "fragment-details-csv-header"
      },
      {
        "propertyId": "delimiter",
        "propertyName": "_DELIMITER_",
        "propertyType": "text",
        "regexp": "",
        "default": ",",
        "required": false,
        "qa": "fragment-details-csv-delimiter"
      }
    ]
  },
  {
    "name": "Elasticsearch",
    "modelType": "ElasticSearch",
    "description": {
      "short": "The output of ElasticSearch use the generic implementation with DataFrames, this implementation transform each UpdateMetricOperation to Row type of Spark and identify each row with his schema.",
      "long": "The output of ElasticSearch use the generic implementation with DataFrames, this implementation transform each UpdateMetricOperation to Row type of Spark and identify each row with his schema.",
      "learnMore": "http://docs.stratio.com/modules/sparta/0.6/outputs.html#elasticsearch-label"
    },
    "properties": [
      {
        "propertyId": "nodes",
        "propertyName": "",
        "propertyType": "list",
        "default": "",
        "required": true,
        "hidden": false,
        "limit": 0,
        "tooltip": "",
        "qa": "fragment-details-elasticSearch-nodes",
        "fields":
        [
          {
            "propertyId": "node",
            "propertyName": "_HOST_",
            "propertyType": "text",
            "regexp": "((([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]))|(((?![0-9]+$)(?!.*-$)(?!-)[a-zA-Z0-9-]{2,63}))",
            "default": "localhost",
            "required": true,
            "qa": "fragment-details-elasticSearch-node"
          },
          {
            "propertyId": "defaultPort",
            "propertyName": "_PORT_",
            "propertyType": "text",
            "regexp": "(0|([1-9]\\d{0,3}|[1-5]\\d{4}|[6][0-5][0-5]([0-2]\\d|[3][0-5])))",
            "default": "9300",
            "required": true,
            "qa": "fragment-details-elasticSearch-defaultPort"
          }
        ]
      },
      {
        "propertyId": "idField",
        "propertyName": "_ID_FIELD_",
        "propertyType": "text",
        "regexp": "",
        "default": "",
        "required": false,
        "qa": "fragment-details-elasticSearch-idField"
      },
      {
        "propertyId": "indexMapping",
        "propertyName": "_INDEX_MAPPING_",
        "propertyType": "text",
        "regexp": "",
        "default": "sparta",
        "required": false,
        "qa": "fragment-details-elasticSearch-indexMapping"
      }
    ]
  }
]