#!/bin/bash -e

######################### SPARTA VARIABLES #########################

# Application Name
export NAME=sparta

# Directory where the sparta binary distribution resides
export SPARTA_HOME=/opt/sds/$NAME

# sparta configuration directory
export SERVER_PROPERTIES=/etc/sds/$NAME

# Log directory
export LOG_DIR=/var/log/sds/$NAME
export LOG_FILE=$LOG_DIR/sparta.log
export LOG_CONFIG_FILE=$SERVER_PROPERTIES/log4j2.xml
export SPARK_LOG_CONFIG_FILE=$SERVER_PROPERTIES/log4j.properties
export JMX_PROMETHEUS_PATH=$SPARTA_HOME/jmx-prometheus

# Data directory
export DATA_DIR=/var/sds/$NAME

# Config file
export CONFIG_FILE=$SERVER_PROPERTIES/reference.conf

# Work directory
export WORK_DIR=/tmp/$NAME

HOST_IN_USE=$HOST
if [ -v CALICO_ENABLED ] && [ $CALICO_ENABLED == "true" ] && [ -v CALICO_NETWORK ] && [ ${#CALICO_NETWORK} != 0 ]; then
   DOCKER_HOST="hostname -f"
   if [[ "$(hostname -f)" =~ \. ]]; then
      DOCKER_HOST="$(hostname -f)"
   else
      DOCKER_HOST="$(hostname -i)"
   fi
  export HOST_IN_USE=$DOCKER_HOST
fi

# Heap Size
export SPARTA_HEAP_SIZE=-Xmx2048m
export SPARTA_HEAP_MINIMUM_SIZE=-Xms1024m
export SPARTA_JVM_SUMMARY="-XX:NativeMemoryTracking=summary"
export SPARTA_JVM_UNLOCK_EXPERIMENTAL_OPTIONS="-XX:+UnlockExperimentalVMOptions"
export SPARTA_JVM_USE_CGROUP_MEMORY_LIMIT="-XX:+UseCGroupMemoryLimitForHeap"
export SPARTA_JVM_GARBAGE_COLLECTOR="-XX:+UseConcMarkSweepGC"
export SPARTA_JVM_DISABLE_MEMORY_MAPPING="-Dsun.zip.disableMemoryMapping=true"

# Additional Java OPTS
export SPARTA_OPTS="$SPARTA_HEAP_MINIMUM_SIZE $SPARTA_HEAP_SIZE $SPARTA_JVM_UNLOCK_EXPERIMENTAL_OPTIONS $SPARTA_JVM_SUMMARY $SPARTA_JVM_USE_CGROUP_MEMORY_LIMIT $SPARTA_JVM_GARBAGE_COLLECTOR $SPARTA_JVM_DISABLE_MEMORY_MAPPING $SPARTA_JVM_EXTRA_OPTIONS"
export DAEMON_OPTS="-Dconfig.file=$CONFIG_FILE -Djava.util.logging.config.file=file://$LOG_CONFIG_FILE"
#export SPARTA_CONFIG_JAAS_FILE=jaas.conf

if [ -v SPARTA_CONFIG_JAAS_FILE ] && [ ${#SPARTA_CONFIG_JAAS_FILE} != 0 ]; then
    export SPARTA_OPTS="$SPARTA_OPTS $SPARTA_CONFIG_JAAS_FILE"
fi

if [ -v PROMETHEUS_METRICS_ENABLE ] && [ $PROMETHEUS_METRICS_ENABLE == "true" ] && [ -v SPARTA_METRICS_PORT ] && [ -v JMX_PROMETHEUS_PATH ]; then
    export SPARTA_PROMETHEUS_JAVA_AGENT="-javaagent:$JMX_PROMETHEUS_PATH/jmx_prometheus_javaagent-0.11.0.jar=$SPARTA_METRICS_PORT:$JMX_PROMETHEUS_PATH/config.yaml"
    export SPARTA_OPTS="$SPARTA_OPTS $SPARTA_PROMETHEUS_JAVA_AGENT"
fi

if [ -v JMX_METRICS_ENABLE ] && [ $JMX_METRICS_ENABLE == "true" ] && [ -v SPARTA_JMX_METRICS_PORT ] && [ -v HOST_IN_USE ]; then
    export SPARTA_JVM_JMX="-Djava.rmi.server.hostname=$HOST_IN_USE -Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.port=$SPARTA_JMX_METRICS_PORT -Dcom.sun.management.jmxremote.rmi.port=$SPARTA_JMX_METRICS_PORT -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false"
    export SPARTA_OPTS="$SPARTA_OPTS $SPARTA_JVM_JMX"
fi

export SPARTA_FILE_ENCODING=${SPARTA_FILE_ENCODING:--Dfile.encoding=UTF-8}
export SPARTA_OPTS="$SPARTA_OPTS $SPARTA_FILE_ENCODING"

# Maximum number of open files
export MAX_OPEN_FILES=65535

############################ SERVICE VARIABLES ############################
SCRIPTNAME=/etc/init.d/$NAME
# Run Sparta SSO as this user ID and group ID
USER=sparta
GROUP=stratio

# Define other required variables
RUN_DIR=/var/run/sds
PIDFILE=$RUN_DIR/$NAME.pid
LOCKDIR="/var/lock"
if [ -d $LOCKDIR/subsys ]; then # It's most likely a CentOS
	LOCKDIR=$LOCKDIR/subsys
fi
LOCKFILE=$LOCKDIR/$NAME
DAEMON=$SPARTA_HOME/bin/sparta.sh

