############################################### CHECK FUNCTIONS ###############################################
# Validate daemon installation
checkDaemon() {
    # Exit if the package is not installed
    test -x "$DAEMON" || exit 0
}

# Validate java installation
function checkJava() {
    if [ -x "$JAVA_HOME/bin/java" ]; then
        JAVA="$JAVA_HOME/bin/java"
    else
        JAVA=`which java`
    fi

    if [ ! -x "$JAVA" ]; then
        echo "Could not find any executable java binary. Please install java in your PATH or set JAVA_HOME" | tee -a $LOG_FILE
        exit 1
    fi
}

# Validate only for root user
function checkUser () {
    if [ $(id -u) -ne 0 ]; then
        echo "You need root privileges to run this script"
        exit 1
    fi
}

# Check run directory
function checkRunDirectory() {
    # check ownership
    # groupship -> stratio
    if [ ! -d "$RUN_DIR" ]; then
        mkdir -p "$RUN_DIR"
        chown "$USER":"$GROUP" $RUN_DIR
        chmod 775 $RUN_DIR
        if [ $? -ne 0 ]; then
            echo "Oops! something unexpected occurred" >&2
            exit 1
        fi
    fi
}

# Validate lock file
function checkLockFile() {
        if [ -e "$LOCKFILE" ]; then
                echo "service is being managed, please wait..."
                exit
        fi
        touch "$LOCKFILE"
        CREATED_LOCKFILE="yes"
}

# Check for sparta environment folders
function checkSpartaFolders(){
    if [ ! -d $LOG_DIR -a ! -d $DATA_DIR -a ! -d $WORK_DIR ]; then
        echo "Directories don't exist!"
        echo "Directories don't exist!" >>$LOG_FILE
        exit 1
    fi
}

# Prepare environment
function prepareEnvironment(){
    if [ -n "$MAX_OPEN_FILES" ]; then
        ulimit -n $MAX_OPEN_FILES
    fi

    if [ -n "$MAX_LOCKED_MEMORY" ]; then
        ulimit -l $MAX_LOCKED_MEMORY
    fi

    if [ -n "$MAX_MAP_COUNT" ]; then
        sysctl -q -w vm.max_map_count=$MAX_MAP_COUNT
    fi
}

#Validate environment var
function checkEnvironmentVar(){
 if [ ! -x "$SPARTA_HOME" ]; then
        echo "Could not find the sparta installation. Please set SPARTA_HOME" | tee -a $LOG_FILE
        exit 1
  fi
  if [ ! -x "$SERVER_PROPERTIES" ]; then
         echo "Could not find the sparta properties. Please set SERVER_PROPERTIES" | tee -a $LOG_FILE
         exit 1
   fi
}


###########################################################################################

# Validate service
function validateService() {
    checkDaemon
    checkUser
    checkRunDirectory
    checkEnvironmentVar
}

# Validate start
function validateStart() {
    checkLockFile
    checkJava
    checkSpartaFolders
    prepareEnvironment
}

# Validate stop
function validateStop(){
    return 0
}

# Validate restart
function validateRestart(){
    return 0
}
