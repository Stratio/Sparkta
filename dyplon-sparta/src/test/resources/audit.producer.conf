### Connector config ###
kafka.queue.time = 2000
kafka.queue.size = 100
kafka.batch.size = 10
kafka.serializer.class = "kafka.serializer.StringEncoder"
kafka.metadata.broker.list = "localhost:9090"
kafka.audit.topic = "myTopic"
kafka.producer.type = "async"

### Default Policy: Could be "Allow" or "Deny"
authorizer.default.policy = "Deny"

### resource type of the plugin
authorizer.resource.type = "HDFS-Path"
plugin.version = "test-version"

### Zk config ###
# Zookeeper connection string (see zookeeper docs for details).
# This is a comma separated host:port pairs, each corresponding to a zk
# server. e.g. "127.0.0.1:3000,127.0.0.1:3001,127.0.0.1:3002".
# You can also append an optional chroot string to the urls to specify the
# root directory for all kafka znodes.
#TODO change this file to an standard file to change better the test configuration
zookeeper.connect = "zk-test:2181"

# Timeout in ms for connecting to zookeeper
zookeeper.connection.timeout.ms = 6000
zookeeper.session.timeout.ms = 6000

# FOR testing
zookeeper.port = 2181
zookeeper.root.path="/stratio/gosec"

ldap {
  host = "localhost"
  port = 389
  principal = "cn=ldaproot,dc=stratio,dc=com"
  authetication = "simple"
  credentials = "stratio"
  domain = "dc=stratio,dc=com"
  secured = false
  mapping {
    # Mappings: In entity needs to specify which fields of LDAP map to proper fields
    # Example:  User(id,name) corresponds on LDAP: uid, cn
    user.id = "uid"
    user.name = "cn"
    user.description = "description"
    user.mail = "mail"
    group.id = "cn"
    group.name = "description"
    group.member = "memberUid"
    group.description = "description"
  }
  matching {
    group.linkUser = "uid=%filter,ou=People,dc=stratio,dc=com"
  }
  queries {
    # The system expect a query with literal '%filter' if needs params or filters.
    # It will be replaced with proper fields
    user.queryAll = "(&(objectClass=person)%filter)"
    group.queryAll = "(&(objectClass=posixGroup)(!(ou=Groups))%filter)"
    # Query for search groups by user.
    group.groupByUser = "(&(objectClass=posixGroup)(!(ou=Groups))(memberUid=uid=%filter,ou=People,dc=stratio,dc=com))"
  }
}