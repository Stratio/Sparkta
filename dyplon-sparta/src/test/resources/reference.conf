plugin.version = 0.0.1
plugin.instance = sparta
plugin.instance = ${?SPARTA_PLUGIN_INSTANCE}

zookeeper {
  connect = "localhost:2181"
  connect = ${?SPARTA_PLUGIN_ZK_CONNECT}
  connection.timeout.ms = 6000
  session.timeout.ms = 6000
  root.path = "/stratio/gosec"
  sasl.client = "true"
  sasl.client = ${?SPARTA_PLUGIN_CLIENT_ZOOKEEPER_SASL_CLIENT}
  watchers.enabled = true
  watchers.enabled = ${?SPARTA_PLUGIN_ZOOKEEPER_WATCHERS}
}


ldap {
  host = "localhost"
  host = ${?SPARTA_PLUGIN_LDAP_HOST}
  port = 636
  port = ${?SPARTA_PLUGIN_LDAP_PORT}
  principal = "cn=ldaproot,dc=stratio,dc=com"
  principal = ${?SPARTA_PLUGIN_LDAP_PRINCIPAL}

  authetication = "simple"
  credentials = "stratio"
  credentials = ${?SPARTA_PLUGIN_LDAP_CREDENTIALS}

  userDomain = "ou=People,dc=stratio,dc=com"
  # TODO environment var to set user domain
  userDomain = ${?SPARTA_PLUGIN_LDAP_USER_DOMAIN}
  groupDomain = "ou=Groups,dc=stratio,dc=com"
  # TODO environment var to set group domain
  groupDomain = ${?SPARTA_PLUGIN_LDAP_GROUP_DOMAIN}

  secured = true
  secured = ${?SPARTA_PLUGIN_LDAP_SECURED}
  schema = "RFC2307bis"
  schema = ${?SPARTA_PLUGIN_LDAP_SCHEMA}
  mapping {
    # Mappings: In entity needs to specify which fields of LDAP map to proper fields
    # Example:  User(id,name) corresponds on LDAP: uid, cn
    user.id = "uid"
    user.id = ${?SPARTA_PLUGIN_LDAP_MAPPING_USER_ID}
    user.name = "cn"
    user.name = ${?SPARTA_PLUGIN_LDAP_MAPPING_USER_NAME}
    user.description = "description"
    user.description = ${?SPARTA_PLUGIN_LDAP_MAPPING_USER_DESCRIPTION}
    user.mail = "mail"
    user.mail = ${?SPARTA_PLUGIN_LDAP_MAPPING_USER_MAIL}
    group.id = "cn"
    group.id = ${?SPARTA_PLUGIN_LDAP_MAPPING_GROUP_ID}
    group.name = "description"
    group.name = ${?SPARTA_PLUGIN_LDAP_MAPPING_GROUP_NAME}
    group.member = "memberUid"
    group.member = ${?SPARTA_PLUGIN_LDAP_MAPPING_GROUP_MEMBER}
    group.description = "description"
    group.description = ${?SPARTA_PLUGIN_LDAP_MAPPING_GROUP_DESCRIPTION}
  }
  matching {
    group.linkUser = "uid=%filter"
    group.linkUser = ${?SPARTA_PLUGIN_LDAP_MATCHING_GROUP_LINKUSER}
  }
  queries {
    # The system expects a query with literal '%filter' if params or filters are needed.
    # It will be replaced with proper fields
    user.queryAll = "(&(objectClass=person))"
    user.queryAll = ${?SPARTA_PLUGIN_LDAP_QUERIES_USER_QUERYALL}
    group.queryAll = "(&(objectClass=posixGroup))"
    group.queryAll = ${?SPARTA_PLUGIN_LDAP_QUERIES_GROUP_QUERYALL}
    # Query for search groups by user.
    group.groupByUser = "(&(objectClass=posixGroup)(memberUid=uid=%filter,ou=People,dc=stratio,dc=com))"
    group.groupByUser =  ${?SPARTA_PLUGIN_LDAP_QUERIES_GROUP_GROUPBYUSER}
  }
}

### Connector config ###
kafka {
  topic = audit
  topic = ${?SPARTA_PLUGIN_KAFKA_TOPIC}
  producer.type=async
  key.serializer = org.apache.kafka.common.serialization.StringSerializer
  value.serializer = org.apache.kafka.common.serialization.StringSerializer
  bootstrap.servers = "localhost:9092"
  bootstrap.servers = ${?SPARTA_PLUGIN_KAFKA_BOOTSTRAP}
  security.protocol = SSL
  security.protocol = ${?SPARTA_PLUGIN_KAFKA_SEC_PROTOCOL}
  ssl.truststore.location = /path/to/client.truststore.jks
  ssl.truststore.location = ${?SPARTA_PLUGIN_KAFKA_TRUSTSTORE}
  ssl.truststore.password = 123456
  ssl.truststore.password = ${?SPARTA_PLUGIN_KAFKA_TRUSTSTORE_PASSWORD}
  ssl.keystore.location = /path/to/client.keystore.jks
  ssl.keystore.location = ${?SPARTA_PLUGIN_KAFKA_KEYSTORE}
  ssl.keystore.password = 123456
  ssl.keystore.password = ${?SPARTA_PLUGIN_KAFKA_KEYSTORE_PASSWORD}
  ssl.key.password = ""
  ssl.key.password = ${?SPARTA_PLUGIN_KAFKA_KEYSTORE_PASSWORD}
}


### Default Policy: Could be "Allow" or "Deny"
authorizer {
  default.policy = "Deny"
  resource.type = "file"
}


cache {
  enabled = false
  enabled = ${?SPARTA_PLUGIN_CACHE_ENABLED}
  ttl = 60000
  ttl = ${?SPARTA_PLUGIN_CACHE_TTL}
}

local.hostname = ${?GOSEC_LOCAL_HOSTNAME}